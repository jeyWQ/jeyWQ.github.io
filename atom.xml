<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jey</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2020-11-06T06:24:40.050Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>jeyWQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OC底层之对象的本质</title>
    <link href="http://example.com/2020/11/05/OC%E5%BA%95%E5%B1%82%E4%B9%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <id>http://example.com/2020/11/05/OC%E5%BA%95%E5%B1%82%E4%B9%8B%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%9C%AC%E8%B4%A8/</id>
    <published>2020-11-05T08:09:43.000Z</published>
    <updated>2020-11-06T06:24:40.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NSObject"><a href="#NSObject" class="headerlink" title="NSObject"></a>NSObject</h2><h3 id="NSObject结构"><a href="#NSObject结构" class="headerlink" title="NSObject结构"></a>NSObject结构</h3><p>在OC中NSObject是大部分类的基类，还有一部分类的基类是NSProxy（以后单独开一篇关于NSProxy），<br>OC中NSObject定义如下:</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@interface NSObject &lt;NSObject&gt; &#123;</span><br><span class="line">#pragma clang diagnostic push</span><br><span class="line">#pragma clang diagnostic ignored &quot;-Wobjc-interface-ivars&quot;</span><br><span class="line"></span><br><span class="line">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line">#pragma clang diagnostic pop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <a id="more"></a><p> 里面有一个Class 类型的isa对象，我们再看Class的定义</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef struct objc_class *Class;</span><br></pre></td></tr></table></figure><p> 我们Class是objc_class类型的结构体。然后在看objc_class内部结构</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> struct objc_class &#123;</span><br><span class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line"></span><br><span class="line">#if !__OBJC2__</span><br><span class="line">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</span><br><span class="line">    const char * _Nonnull name                               OBJC2_UNAVAILABLE;</span><br><span class="line">    long version                                             OBJC2_UNAVAILABLE;</span><br><span class="line">    long info                                                OBJC2_UNAVAILABLE;</span><br><span class="line">    long instance_size                                       OBJC2_UNAVAILABLE;</span><br><span class="line">    struct objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</span><br><span class="line">    struct objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</span><br><span class="line">    struct objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</span><br><span class="line">    struct objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">&#125; OBJC2_UNAVAILABLE;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  上面代码有个很重要的东西就是_OBJC2_，表示在objec2之后就不在是这种结构体了。所以我们通过<a href="https://opensource.apple.com/tarballs/">apple源码</a>，可以发现新的objc_class如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">struct objc_class : objc_object &#123;</span><br><span class="line">    &#x2F;&#x2F; Class ISA;</span><br><span class="line">    Class superclass;</span><br><span class="line">    cache_t cache;             &#x2F;&#x2F; formerly cache pointer and vtable</span><br><span class="line">    class_data_bits_t bits;    &#x2F;&#x2F; class_rw_t * plus custom rr&#x2F;alloc flags</span><br><span class="line">    &#x2F;&#x2F; readwrite_table 可读可写的表</span><br><span class="line">    class_rw_t *data() const &#123;</span><br><span class="line">        return bits.data();</span><br><span class="line">    &#125;</span><br><span class="line">    void setData(class_rw_t *newData) &#123;</span><br><span class="line">        bits.setData(newData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void setInfo(uint32_t set) &#123;</span><br><span class="line">        ASSERT(isFuture()  ||  isRealized());</span><br><span class="line">        data()-&gt;setFlags(set);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void clearInfo(uint32_t clear) &#123;</span><br><span class="line">        ASSERT(isFuture()  ||  isRealized());</span><br><span class="line">        data()-&gt;clearFlags(clear);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; set and clear must not overlap</span><br><span class="line">    void changeInfo(uint32_t set, uint32_t clear) &#123;</span><br><span class="line">        ASSERT(isFuture()  ||  isRealized());</span><br><span class="line">        ASSERT((set &amp; clear) &#x3D;&#x3D; 0);</span><br><span class="line">        data()-&gt;changeFlags(set, clear);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;；</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  从上面的代码发现C++中结构体也是可以继承的。相当于在objc_class在前面添加 <code>Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</code><br>  所以对象的本质其实是C的结构体</p><h2 id="实例对象、类对象、和元类对象"><a href="#实例对象、类对象、和元类对象" class="headerlink" title="实例对象、类对象、和元类对象"></a>实例对象、类对象、和元类对象</h2><p>实例对象、类对象、和元类对象的概念</p><h3 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h3><p>实例对象即实例化的对象，通过new或者alloc init方法创建的对象就是实例对象。isa指针指向类对象。在arm64中 实例对象的isa &amp; ISA_MAKE (常量)的地址和类对象的地址相同。</p><h4 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h4><p>在上面代码中，NSObject也是一个对象，在内存中只有一份，用来存放实例对象的对象方法、属性名、协议等信息<br>在arm64中 类对象的isa &amp; ISA_MAKE (常量)的地址和元类对象的地址相同。</p><h4 id="元类对象"><a href="#元类对象" class="headerlink" title="元类对象"></a>元类对象</h4><p>元类对象成员变量和类对象数据结构一致，里面成员变量的值有所不同。元类对象中存放的是类方法。<br>获取类对象和元类对象的常用方法如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取类对象</span><br><span class="line">NSObject *object1 &#x3D; [[NSObject alloc]init];</span><br><span class="line">Class objectClass1 &#x3D; [object2 class];</span><br><span class="line">Class objectClass2 &#x3D; [NSObject class];</span><br><span class="line">&#x2F;&#x2F;传入是实例对象，则返回类对象，传入是类对象则返回元类对象。</span><br><span class="line">Class objectClass3 &#x3D; object_getClass(object1)  &#x2F;&#x2F; 类对象</span><br><span class="line">Class objectMetaClass &#x3D; object_getClass([NSObject class]); &#x2F;&#x2F; 元类对象</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是表明三者关系的经典图片<br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlczIwMTUuY25ibG9ncy5jb20vYmxvZy80MzQ0MDUvMjAxNTEyLzQzNDQwNS0yMDE1MTIyNzE4MTMzOTQ5OS0xMjQzNDg1ODc1LnBuZw?x-oss-process=image/format,png"></p><p>值得注意的是：</p><p><code>元类的isa指向其基类的元类</code><br><code>基类元类的superClass指向基类类对象</code><br><code>基类类对象的superClass指向nil</code></p><blockquote><p>关于基类元类的superClass指向基类类对象</p></blockquote>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@interface MJPerson : NSObject</span><br><span class="line">@end</span><br><span class="line">@implementation MJPerson</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@interface MJStudent : MJPerson</span><br><span class="line">+ (void)test;</span><br><span class="line">@end</span><br><span class="line">@implementation MJStudent</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    [MJStudent test];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码运行会crash，因为我们MJStudent的类方法存放在MJStudent元类对象中，所以会根据isa找到MJStudent元类对象，但是元类对象中也不存在test方法，然后会根据superClass找到父类的元类对象，如果还是没有回找到基类的元类对象，如果还是没有就会报<code>unrecognized selector sent to class 0x10000822</code>信息。这个我们根据上面的图片可以很轻松的知道。</p><p>现在我们给NSObject写一个分类</p><pre><code>@interface NSObject (JEYTest)+ (void)test;@end@implementation test+ (void)test &#123;   NSLog(@&quot;实现了该方法%@&quot;,self);&#125;@end</code></pre><p>这样是没有问题的，因为基类的元类对象中存test类方法。<br>然后我们把类方法换成对象方法。</p><pre><code>@interface NSObject (JEYTest)- (void)test;@end@implementation test- (void)test &#123;   NSLog(@&quot;实现了该方法%@&quot;,self); //打印 实现了该方法JEYStudent&#125;@end</code></pre><p> 从上面的代码发现因为test方法是存放在类对象中，所以是基类的元类的isa指向了基类的类对象。<br>还有就是调用类方法居然实现的是对象方法。这个涉及的是OC底层的消息发送，发送的消息都会转为以下代码</p><pre><code>objc_msgSend (someObject,@selector(messageName:),parameter );</code></pre><blockquote><p> 发送消息的过程中并没有区分对象方法和类方法，对象方法和类方法都会转为objc_msgSend类型的代码，本质上没有区别的。</p></blockquote><p>结语：虽然内容一般，但自己收获很大。第一次正式的写，还是感觉到了很多不足。第一遍内容比较浅显，都是一些看一下就明白的，属于概念性质的。我感觉如果肯研究的话底层其实没有想象的难。最关键的是能学习这种编程的思想。这才是对以后最提升自己最关键的，<strong>一通则百通</strong>。 </p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;NSObject&quot;&gt;&lt;a href=&quot;#NSObject&quot; class=&quot;headerlink&quot; title=&quot;NSObject&quot;&gt;&lt;/a&gt;NSObject&lt;/h2&gt;&lt;h3 id=&quot;NSObject结构&quot;&gt;&lt;a href=&quot;#NSObject结构&quot; class=&quot;headerlink&quot; title=&quot;NSObject结构&quot;&gt;&lt;/a&gt;NSObject结构&lt;/h3&gt;&lt;p&gt;在OC中NSObject是大部分类的基类，还有一部分类的基类是NSProxy（以后单独开一篇关于NSProxy），&lt;br&gt;OC中NSObject定义如下:&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@interface NSObject &amp;lt;NSObject&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma clang diagnostic push&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma clang diagnostic ignored &amp;quot;-Wobjc-interface-ivars&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Class isa  OBJC_ISA_AVAILABILITY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#pragma clang diagnostic pop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="OC" scheme="http://example.com/tags/OC/"/>
    
  </entry>
  
  <entry>
    <title>写在开篇</title>
    <link href="http://example.com/2020/11/05/%E5%86%99%E5%9C%A8%E5%BC%80%E7%AF%87/"/>
    <id>http://example.com/2020/11/05/%E5%86%99%E5%9C%A8%E5%BC%80%E7%AF%87/</id>
    <published>2020-11-05T08:04:13.119Z</published>
    <updated>2020-11-05T09:31:58.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h1><h2 id="终于下定决心要开始坚持写博客了，之前也曾在博客园，简书等平台写个，但是都没有坚持下来。希望这次可以，fighting！"><a href="#终于下定决心要开始坚持写博客了，之前也曾在博客园，简书等平台写个，但是都没有坚持下来。希望这次可以，fighting！" class="headerlink" title="终于下定决心要开始坚持写博客了，之前也曾在博客园，简书等平台写个，但是都没有坚持下来。希望这次可以，fighting！"></a>终于下定决心要开始坚持写博客了，之前也曾在博客园，简书等平台写个，但是都没有坚持下来。希望这次可以，fighting！</h2><a id="more"></a><h1 id="ps-希望可以一周写一篇稍微有点质量的博客，而不是东拼西凑出来的垃圾。这个博客唯一的意义是希望自己的技术有所成长。"><a href="#ps-希望可以一周写一篇稍微有点质量的博客，而不是东拼西凑出来的垃圾。这个博客唯一的意义是希望自己的技术有所成长。" class="headerlink" title="ps:希望可以一周写一篇稍微有点质量的博客，而不是东拼西凑出来的垃圾。这个博客唯一的意义是希望自己的技术有所成长。"></a>ps:希望可以一周写一篇稍微有点质量的博客，而不是东拼西凑出来的垃圾。这个博客唯一的意义是希望自己的技术有所成长。</h1>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h1&gt;&lt;h2 id=&quot;终于下定决心要开始坚持写博客了，之前也曾在博客园，简书等平台写个，但是都没有坚持下来。希望这次可以，fighting！&quot;&gt;&lt;a href=&quot;#终于下定决心要开始坚持写博客了，之前也曾在博客园，简书等平台写个，但是都没有坚持下来。希望这次可以，fighting！&quot; class=&quot;headerlink&quot; title=&quot;终于下定决心要开始坚持写博客了，之前也曾在博客园，简书等平台写个，但是都没有坚持下来。希望这次可以，fighting！&quot;&gt;&lt;/a&gt;终于下定决心要开始坚持写博客了，之前也曾在博客园，简书等平台写个，但是都没有坚持下来。希望这次可以，fighting！&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/11/04/hello-world/"/>
    <id>http://example.com/2020/11/04/hello-world/</id>
    <published>2020-11-04T09:08:29.015Z</published>
    <updated>2020-11-06T02:58:22.026Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a><h3 id="NSObject"><a href="#NSObject" class="headerlink" title="NSObject"></a>NSObject</h3><p>在OC中NSObject是大部分类的基类，还有一部分类的基类是NSProxy（以后单独开一篇关于NSProxy），<br>OC中NSObject定义如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Create-a-new-post义如下"><a href="#Create-a-new-post义如下" class="headerlink" title="Create a new post义如下:"></a>Create a new post义如下:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a><br>/Users/jey/Documents/Blog/themes/next/source/css/_variables/base.styl<br>/Users/jey/Documents/Blog/themes/next/source/css/_common/scaffolding/base.styl<br>/Users/jey/Documents/Blog/themes/next/source/css/_common/scaffolding/base.styl</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
